# /pages/dashboard.py
import streamlit as st
from db.functions import adicionar_usuario, get_proximo_id, listar_psicologos, listar_login_privilegios, atualizar_privilegio_usuario
import re

# Fun√ß√£o de valida√ß√£o com retorno detalhado
def validar_criterios_senha(senha):
    erros = []
    if len(senha) < 8:
        erros.append("üîí M√≠nimo de 8 caracteres")
    if not re.search(r"[A-Z]", senha):
        erros.append("üîí Pelo menos uma letra mai√∫scula (A-Z)")
    if not re.search(r"[a-z]", senha):
        erros.append("üîí Pelo menos uma letra min√∫scula (a-z)")
    if not re.search(r"[0-9]", senha):
        erros.append("üîí Pelo menos um n√∫mero (0-9)")
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", senha):
        erros.append("üîí Pelo menos um caractere especial (!@#$...)")
    return erros

# Fun√ß√£o de cadastro com feedback por crit√©rio
def cadastro():
    st.info("üìù Cadastro de Novo Usu√°rio (Necess√°rio Psic√≥logo Respons√°vel)")
    novo_usuario = st.text_input("Novo Usu√°rio")
    nova_senha = st.text_input("Nova Senha", type="password")

    erros_senha = validar_criterios_senha(nova_senha)

    if nova_senha:
        if erros_senha:
            st.warning("‚ö†Ô∏è A senha n√£o atende aos seguintes crit√©rios:")
            for erro in erros_senha:
                st.info(erro)
        else:
            st.success("‚úÖ A senha atende a todos os crit√©rios de seguran√ßa.")

    funcao = st.selectbox("Fun√ß√£o", ['Assistente', 'Psic√≥loga'])
    if funcao == 'Psic√≥loga':
        novo_id = get_proximo_id("psicologos")
        psicologo_responsavel = novo_id
        privilegio = True
    else:
        psicologos = listar_psicologos()
        psicologos_dict = dict(zip(psicologos['nome'], psicologos['id']))
        nome_selecionado = st.selectbox("Psic√≥logo Respons√°vel", list(psicologos_dict.keys()))
        psicologo_responsavel = psicologos_dict[nome_selecionado]
        privilegio = False

    if st.button("Cadastrar Usu√°rio"):
        if not novo_usuario or not nova_senha or not psicologo_responsavel or erros_senha:
            st.warning("‚ö†Ô∏è Preencha todos os campos corretamente e corrija a senha.")
        else:
            try:
                adicionar_usuario(novo_usuario, nova_senha, funcao, psicologo_responsavel, privilegio)
                st.success(f"‚úÖ Usu√°rio {novo_usuario} cadastrado com sucesso!")
                st.info("Agora fa√ßa login com o novo usu√°rio.")
            except ValueError as e:
                st.error(f"Erro: {e}")

def conceder_privilegio():
    usuarios = listar_login_privilegios()  # Deve retornar um DataFrame

    if usuarios.empty:
        st.warning("Nenhum usu√°rio cadastrado.")
        return

    # Cria as op√ß√µes do selectbox com base no DataFrame
    opcoes = [
        f"{row['id']} - {row['usuario']} (Privil√©gio: {'‚úÖ' if row['privilegio'] else '‚ùå'})"
        for _, row in usuarios.iterrows()
    ]
    usuario_selecionado = st.selectbox("Selecione o usu√°rio", opcoes)

    # Extrai o ID do usu√°rio selecionado
    id_usuario = int(usuario_selecionado.split(" - ")[0])
    
    # Filtra o DataFrame pelo ID selecionado
    usuario_row = usuarios[usuarios['id'] == id_usuario].iloc[0]

    novo_privilegio = st.checkbox(
        "Conceder Privil√©gio (Administrador)?",
        value=bool(usuario_row['privilegio'])
    )

    if st.button("üíæ Atualizar Privil√©gio"):
        atualizar_privilegio_usuario(id_usuario, novo_privilegio)
        st.success("‚úÖ Privil√©gio atualizado com sucesso.")
        st.rerun()

def show_edicao_usuarios():
    st.title("üìä Edi√ß√£o de usu√°rios")
    st.write("Configure permiss√µes ou adicione novos usu√°rios")
    click = st.selectbox("Edi√ß√£o de Usu√°rios", ['Novo usu√°rio', 'Conceder privil√©gios'])
    if click == 'Novo usu√°rio':
        cadastro()
    else:
        conceder_privilegio()

    